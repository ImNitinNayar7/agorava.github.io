<?xml version='1.0' encoding='utf-8' ?>
<feed xml:lang='en-US' xmlns='http://www.w3.org/2005/Atom'>
  <id>http://agorava.org/</id>
  <title>http://agorava.org</title>
  <updated>2012-07-10T00:00:00Z</updated>
  <link href='http://agorava.org/news.atom' rel='self' type='application/atom+xml' />
  <link href='http://agorava.org/' rel='alternate' type='text/html' />
  <entry>
    <id>http://agorava.org/news/2012/07/10/Starting-a-CDI-webapp-from-Maven-with-Weld-servlet-and-jetty-plugin.html</id>
    <title>Starting a CDI webapp from Maven with Weld-Servlet and Jetty Plugin</title>
    <updated>2012-07-10T00:00:00Z</updated>
    <published>2012-07-10T00:00:00Z</published>
    <link href='http://agorava.org/news/2012/07/10/Starting-a-CDI-webapp-from-Maven-with-Weld-servlet-and-jetty-plugin.html' rel='alternate' type='text/html' />
    <summary>
      
In Agorava framework we want to provide an easy way to launch our example applications. One of the easiest way is to provide a maven Goal that build the project and launch it with embedded Jetty servlet container. If you have read our previous post you already know that right now Agorava has only a CDI implementation. So when we created Socializer demo app we add to find a way to launch CDI container from Jetty Maven Plugin. This article is about how we did it.
Launching CDI from Servlet Api
The first problem to deal with is about launching CDI container...
    </summary>
    <content type='html'>
      &lt;p&gt;&lt;img src=&quot;http://agorava.org/images/weld.png&quot; style=&quot;width:80px;&quot; class=&quot;left&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In Agorava framework we want to provide an easy way to launch our example applications. One of the easiest way is to provide a maven Goal that build the project and launch it with embedded Jetty servlet container. If you have read our &lt;a href=&quot;http://agorava.org/news/2012/06/22/Meet-Agorava-the-Social-Framework&quot;&gt;previous post&lt;/a&gt; you already know that right now Agorava has only a &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; implementation. So when we created &lt;a href=&quot;http://socializer.agorava.cloudbees.net/home.jsf&quot;&gt;Socializer demo app&lt;/a&gt; we add to find a way to launch &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; container from Jetty Maven Plugin. This article is about how we did it.&lt;/p&gt;
&lt;h3&gt;Launching &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; from Servlet Api&lt;/h3&gt;
&lt;p&gt;The first problem to deal with is about launching &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; container from Servlet &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; is a Java EE 6 specification and thus comes in all Java EE container like JBoss, TomEE or Glassfish. However the specification doesn&amp;#8217;t provide a standard way to launch &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; container outside Java EE. Each implementation brings its own solution (to be more precise OpenWebBeans and Weld bring a solution, Candi has no known way to be launch outside Resin). We decided to go with Weld because it&amp;#8217;s the &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; RI and that it is the implementation on which Agorava was the more tested thru Glassfish and JBoss.&lt;/p&gt;
&lt;h3&gt;Adding maven dependecies&lt;/h3&gt;
&lt;p&gt;As we want to support Jetty but also full Java EE containers we added a profile in the pom.xml to keep the Java EE build clean. As this profile is supposed to build and run the project we call it &lt;code&gt;run&lt;/code&gt;. We add the following dependencies in the pom.xml&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;profile&amp;gt;&amp;#x000A;  &amp;lt;id&amp;gt;run&amp;lt;/id&amp;gt;&amp;#x000A;    &amp;lt;dependencies&amp;gt;&amp;#x000A;        &amp;lt;dependency&amp;gt;&amp;#x000A;            &amp;lt;groupId&amp;gt;org.jboss.weld.servlet&amp;lt;/groupId&amp;gt;&amp;#x000A;            &amp;lt;artifactId&amp;gt;weld-servlet&amp;lt;/artifactId&amp;gt;&amp;#x000A;            &amp;lt;version&amp;gt;1.1.8.Final&amp;lt;/version&amp;gt;&amp;#x000A;            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&amp;#x000A;        &amp;lt;/dependency&amp;gt;&amp;#x000A;        &amp;lt;dependency&amp;gt;&amp;#x000A;            &amp;lt;groupId&amp;gt;com.sun.faces&amp;lt;/groupId&amp;gt;&amp;#x000A;            &amp;lt;artifactId&amp;gt;jsf-api&amp;lt;/artifactId&amp;gt;&amp;#x000A;            &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;&amp;#x000A;        &amp;lt;/dependency&amp;gt;&amp;#x000A;        &amp;lt;dependency&amp;gt;&amp;#x000A;            &amp;lt;groupId&amp;gt;com.sun.faces&amp;lt;/groupId&amp;gt;&amp;#x000A;            &amp;lt;artifactId&amp;gt;jsf-impl&amp;lt;/artifactId&amp;gt;&amp;#x000A;            &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;&amp;#x000A;        &amp;lt;/dependency&amp;gt;&amp;#x000A;    &amp;lt;/dependencies&amp;gt;&amp;#x000A;&amp;lt;/profile&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Jsf dependencies are added because Socializer uses &lt;span class=&quot;caps&quot;&gt;JSF&lt;/span&gt; and Jetty doesn&amp;#8217;t provide thrm. The Jboss Weld Servlet is the important dependency here since it will provide bootstrapping for &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; thru servlet &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. It also will bring transitively all the needed dependencies for Weld core and &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Adding Jetty Maven plugin&lt;/h3&gt;
&lt;p&gt;Now we can add the plugin to our new profile&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;build&amp;gt;&amp;#x000A;    &amp;lt;plugins&amp;gt;&amp;#x000A;       &amp;lt;plugin&amp;gt;&amp;#x000A;          &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;&amp;#x000A;          &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;&amp;#x000A;          &amp;lt;version&amp;gt;8.1.3.v20120416&amp;lt;/version&amp;gt;&amp;#x000A;       &amp;lt;/plugin&amp;gt;&amp;#x000A;    &amp;lt;/plugins&amp;gt;&amp;#x000A;&amp;lt;/build&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This plugin allows to build a Maven project and launch Jetty directly from Maven with a simple &lt;code&gt;mvn jetty:run&lt;/code&gt; command.&lt;/p&gt;
&lt;h3&gt;Boostraping &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;To bootstrap &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;, we have 2 steps to perform :&lt;/p&gt;
&lt;h4&gt;Expose &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; bean manager thru &lt;span class=&quot;caps&quot;&gt;JNDI&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;To do that we create a &lt;code&gt;jetty-env.xml&lt;/code&gt; file in &lt;span class=&quot;caps&quot;&gt;WEB&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;INF&lt;/span&gt; containing this&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;!DOCTYPE Configure PUBLIC &quot;-//Mort Bay Consulting//DTD Configure//EN&quot; &quot;http://www.eclipse.org/jetty/configure.dtd&quot;&amp;gt;&amp;#x000A;&amp;lt;Configure id=&quot;webAppCtx&quot; class=&quot;org.eclipse.jetty.webapp.WebAppContext&quot;&amp;gt;&amp;#x000A;    &amp;lt;New id=&quot;BeanManager&quot; class=&quot;org.eclipse.jetty.plus.jndi.Resource&quot;&amp;gt;&amp;#x000A;        &amp;lt;Arg&amp;gt;&amp;#x000A;            &amp;lt;Ref id=&quot;webAppCtx&quot;/&amp;gt;&amp;#x000A;        &amp;lt;/Arg&amp;gt;&amp;#x000A;        &amp;lt;Arg&amp;gt;BeanManager&amp;lt;/Arg&amp;gt;&amp;#x000A;        &amp;lt;Arg&amp;gt;&amp;#x000A;            &amp;lt;New class=&quot;javax.naming.Reference&quot;&amp;gt;&amp;#x000A;                &amp;lt;Arg&amp;gt;javax.enterprise.inject.spi.BeanManager&amp;lt;/Arg&amp;gt;&amp;#x000A;                &amp;lt;Arg&amp;gt;org.jboss.weld.resources.ManagerObjectFactory&amp;lt;/Arg&amp;gt;&amp;#x000A;                &amp;lt;Arg/&amp;gt;&amp;#x000A;            &amp;lt;/New&amp;gt;&amp;#x000A;        &amp;lt;/Arg&amp;gt;&amp;#x000A;    &amp;lt;/New&amp;gt;&amp;#x000A;&amp;lt;/Configure&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This file is a standard Jetty config file and is run by the container at boot time.&lt;/p&gt;
&lt;h4&gt;Adding Web.xml configuration&lt;/h4&gt;
&lt;p&gt;To achieve the bootstrapping we also need to add two entries to &lt;code&gt;web.xml&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;One to retrieve the BeanManager exposed in the file above and expose it to servlet &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;One to launch the servlet listener that will boot &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we don&amp;#8217;t want to pollute existing web.xml which works perfectly for Java EE 6 containers, we add a web.xml overriding file to add our entries. This file is declared in Jetty plugin configuration like this&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;plugin&amp;gt;&amp;#x000A;    &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;&amp;#x000A;    &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;&amp;#x000A;    &amp;lt;version&amp;gt;8.1.3.v20120416&amp;lt;/version&amp;gt;&amp;#x000A;    &amp;lt;configuration&amp;gt;&amp;#x000A;        &amp;lt;webApp&amp;gt;&amp;#x000A;            &amp;lt;overrideDescriptor&amp;gt;src/main/webapp/WEB-INF/web-add.xml&amp;lt;/overrideDescriptor&amp;gt;&amp;#x000A;        &amp;lt;/webApp&amp;gt;&amp;#x000A;    &amp;lt;/configuration&amp;gt;&amp;#x000A;&amp;lt;/plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The content of web-add.xml file is as follow&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;web-app version=&quot;3.0&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;#x000A;         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&amp;gt;&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettify&quot;&gt;    &amp;lt;listener&amp;gt;&amp;#x000A;        &amp;lt;listener-class&amp;gt;org.jboss.weld.environment.servlet.Listener&amp;lt;/listener-class&amp;gt;&amp;#x000A;    &amp;lt;/listener&amp;gt;&lt;/code&gt;&amp;#x000A;&amp;#x000A;&lt;code class=&quot;prettify&quot;&gt;    &amp;lt;resource-env-ref&amp;gt;&amp;#x000A;        &amp;lt;resource-env-ref-name&amp;gt;BeanManager&amp;lt;/resource-env-ref-name&amp;gt;&amp;#x000A;        &amp;lt;resource-env-ref-type&amp;gt;&amp;#x000A;            javax.enterprise.inject.spi.BeanManager&amp;#x000A;        &amp;lt;/resource-env-ref-type&amp;gt;&amp;#x000A;    &amp;lt;/resource-env-ref&amp;gt;&amp;#x000A;&amp;lt;/web-app&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;#8217;s content will override web.xml one (i.e web.xml will be interpreted before web-add.xml).&lt;/p&gt;
&lt;h3&gt;Last trick to allow injection in servlets&lt;/h3&gt;
&lt;p&gt;Weld Servlet will try to decorate some Jetty internal class to add the possibility of using &lt;code&gt;@Inject&lt;/code&gt; inside servlets. This class is a Jetty system class and therefore is not visible from the web application. We have to tell Jetty classloader to expose this class to the web app in order to have Weld Servlet decorating it.&lt;br /&gt;
To allow this we create a &lt;code&gt;jetty-context.xml&lt;/code&gt; file in &lt;span class=&quot;caps&quot;&gt;WEB&lt;/span&gt;-&lt;span class=&quot;caps&quot;&gt;INF&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;!DOCTYPE Configure PUBLIC &quot;-//Jetty//Configure//EN&quot; &quot;http://www.eclipse.org/jetty/configure.dtd&quot;&amp;gt;&amp;#x000A;&amp;lt;Configure class=&quot;org.eclipse.jetty.webapp.WebAppContext&quot;&amp;gt;&amp;#x000A;    &amp;lt;Set name=&quot;serverClasses&quot;&amp;gt;&amp;#x000A;        &amp;lt;Array type=&quot;java.lang.String&quot;&amp;gt;&amp;#x000A;            &amp;lt;Item&amp;gt;-org.eclipse.jetty.servlet.ServletContextHandler.Decorator&amp;lt;/Item&amp;gt;&amp;#x000A;        &amp;lt;/Array&amp;gt;&amp;#x000A;    &amp;lt;/Set&amp;gt;&amp;#x000A;&amp;lt;/Configure&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we add it to Jetty Maven plugin configuration like this&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;configuration&amp;gt;&amp;#x000A;    &amp;lt;webApp&amp;gt;&amp;#x000A;        &amp;lt;overrideDescriptor&amp;gt;src/main/webapp/WEB-INF/web-add.xml&amp;lt;/overrideDescriptor&amp;gt;&amp;#x000A;    &amp;lt;/webApp&amp;gt;&amp;#x000A;    &amp;lt;contextXml&amp;gt;src/main/webapp/WEB-INF/jetty-context.xml&amp;lt;/contextXml&amp;gt;&amp;#x000A;&amp;lt;/configuration&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we&amp;#8217;re done&lt;/p&gt;
&lt;h3&gt;To sum up&lt;/h3&gt;
&lt;p&gt;Here is the complete &lt;code&gt;run&lt;/code&gt; Profile in our &lt;code&gt;pom.xml&lt;/code&gt; file&lt;/p&gt;
&lt;pre class=&quot;prettify&quot;&gt;&lt;code class=&quot;prettify&quot;&gt;&amp;lt;profile&amp;gt;&amp;#x000A;    &amp;lt;id&amp;gt;run&amp;lt;/id&amp;gt;&amp;#x000A;    &amp;lt;dependencies&amp;gt;&amp;#x000A;        &amp;lt;dependency&amp;gt;&amp;#x000A;            &amp;lt;groupId&amp;gt;org.jboss.weld.servlet&amp;lt;/groupId&amp;gt;&amp;#x000A;            &amp;lt;artifactId&amp;gt;weld-servlet&amp;lt;/artifactId&amp;gt;&amp;#x000A;            &amp;lt;version&amp;gt;1.1.8.Final&amp;lt;/version&amp;gt;&amp;#x000A;            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;&amp;#x000A;        &amp;lt;/dependency&amp;gt;&amp;#x000A;        &amp;lt;dependency&amp;gt;&amp;#x000A;            &amp;lt;groupId&amp;gt;com.sun.faces&amp;lt;/groupId&amp;gt;&amp;#x000A;            &amp;lt;artifactId&amp;gt;jsf-api&amp;lt;/artifactId&amp;gt;&amp;#x000A;            &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;&amp;#x000A;        &amp;lt;/dependency&amp;gt;&amp;#x000A;        &amp;lt;dependency&amp;gt;&amp;#x000A;            &amp;lt;groupId&amp;gt;com.sun.faces&amp;lt;/groupId&amp;gt;&amp;#x000A;            &amp;lt;artifactId&amp;gt;jsf-impl&amp;lt;/artifactId&amp;gt;&amp;#x000A;            &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;&amp;#x000A;        &amp;lt;/dependency&amp;gt;&amp;#x000A;    &amp;lt;/dependencies&amp;gt;&amp;#x000A;    &amp;lt;build&amp;gt;&amp;#x000A;        &amp;lt;defaultGoal&amp;gt;clean jetty:run&amp;lt;/defaultGoal&amp;gt;&amp;#x000A;        &amp;lt;plugins&amp;gt;&amp;#x000A;            &amp;lt;plugin&amp;gt;&amp;#x000A;                &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;&amp;#x000A;                &amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;&amp;#x000A;                &amp;lt;version&amp;gt;8.1.3.v20120416&amp;lt;/version&amp;gt;&amp;#x000A;                &amp;lt;configuration&amp;gt;&amp;#x000A;                    &amp;lt;webApp&amp;gt;&amp;#x000A;                        &amp;lt;overrideDescriptor&amp;gt;src/main/webapp/WEB-INF/web-add.xml&amp;lt;/overrideDescriptor&amp;gt;&amp;#x000A;                    &amp;lt;/webApp&amp;gt;&amp;#x000A;                    &amp;lt;contextXml&amp;gt;src/main/webapp/WEB-INF/jetty-context.xml&amp;lt;/contextXml&amp;gt;&amp;#x000A;                &amp;lt;/configuration&amp;gt;&amp;#x000A;            &amp;lt;/plugin&amp;gt;&amp;#x000A;        &amp;lt;/plugins&amp;gt;&amp;#x000A;    &amp;lt;/build&amp;gt;&amp;#x000A;&amp;lt;/profile&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&amp;#8217;t forget the 3 files above &lt;code&gt;jetty-env.xml&lt;/code&gt; to define &lt;span class=&quot;caps&quot;&gt;JNDI&lt;/span&gt;, &lt;code&gt;web-add.xml&lt;/code&gt; to override web.xml with &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; servlet bootstrapping and &lt;span class=&quot;caps&quot;&gt;JNDI&lt;/span&gt; and &lt;code&gt;jetty-context.xml&lt;/code&gt; to expose the internal servlet implementation for Weld decorator.&lt;br /&gt;
With this Maven profile, we only have to enter &lt;code&gt;mvn -Prun&lt;/code&gt; to build our web application and have it launched in Jetty to test it. Hard to make it simpler.&lt;/p&gt;
&lt;h3&gt;Check our code&lt;/h3&gt;
&lt;p&gt;Feel free to look at &lt;a href=&quot;http://github.com/agorava/agorava-socializer&quot;&gt;Socializer code&lt;/a&gt; and play with our &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;. Contribution are always welcome.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://agorava.org/news/2012/06/22/Meet-Agorava-the-Social-Framework.html</id>
    <title>Meet Agorava, The Social Framework</title>
    <updated>2012-06-22T00:00:00Z</updated>
    <published>2012-06-22T00:00:00Z</published>
    <link href='http://agorava.org/news/2012/06/22/Meet-Agorava-the-Social-Framework.html' rel='alternate' type='text/html' />
    <summary>
      
      Did you ever looked for a nice solution in java to authenticate your users with their Twitter, Facebook or LinkedIn account ? Have you ever looked for a nice way to post tweets or Facebook updates from your Java application? Do you need to read your timeline or perform a search on a Social Media services from Java EE web application? If you answered yes to one of these questions Agorava is (or will be soon) the right answer to your needs.
      Agorava is the missing framework to deal with Social Media based on OAuth 1.0a and OAuth 2.0. It provides...
    </summary>
    <content type='html'>
      &lt;p&gt;&lt;img src=&quot;http://agorava.org/images/logo.png&quot; class=&quot;left&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Did you ever looked for a nice solution in java to authenticate your users with their Twitter, Facebook or LinkedIn account ? Have you ever looked for a nice way to post tweets or Facebook updates from your Java application? Do you need to read your timeline or perform a search on a Social Media services from Java EE web application? If you answered yes to one of these questions Agorava is (or will be soon) the right answer to your needs.&lt;br /&gt;
Agorava is the missing framework to deal with Social Media based on OAuth 1.0a and OAuth 2.0. It provides a way to authenticate on Social Media, use APIs and map &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt; answers to Java pojo. It&amp;#8217;ll have multiple implementations (like &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt;, Java SE, &lt;span class=&quot;caps&quot;&gt;JSR&lt;/span&gt; 330 supporting framework and others) to support your needs. Right now the only implementation is based on &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; but we&amp;#8217;ll provide others in the coming months.&lt;/p&gt;
&lt;h3&gt;Agorava genesis&lt;/h3&gt;
&lt;p&gt;Agorava&amp;#8217;s short history is important because it helps to understand the goals of our team. In March 2011 the project Seam Social was launched. This project was a collection of &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; beans and extension to support Social Network consuming. It lived inside Seam 3 project which was an ambitious JBoss project aimed to provide a rich ecosystem for Java EE 6 thru &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; extensions. For all kind of reasons we won&amp;#8217;t develop here, Seam 3 project was stopped at the end of 2011 to create a new project around &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; ecosystem : &lt;a href=&quot;https://cwiki.apache.org/confluence/display/DeltaSpike/Temporary+Documentation&quot;&gt;Apache Deltaspike&lt;/a&gt; (merging Seam 3, Apache &lt;span class=&quot;caps&quot;&gt;CODI&lt;/span&gt; and others initiatives).&lt;br /&gt;
In parallel of this event, a few people launched a &lt;span class=&quot;caps&quot;&gt;JCP&lt;/span&gt; proposal on Social Media : &lt;a href=&quot;http://jcp.org/en/jsr/detail?id=357&quot;&gt;Java Social &lt;span class=&quot;caps&quot;&gt;JSR&lt;/span&gt; 357&lt;/a&gt;. Projects like Seam Social or &lt;a href=&quot;http://java.net/projects/dalicore&quot;&gt;DaliCore&lt;/a&gt; were main influencers for this proposal. This proposal was voted down for all kind of reasons, but mainly because there wasn&amp;#8217;t a real proof of concept (an implementation) behind it.&lt;br /&gt;
So the conjunction of these 2 stories brought us to create a new project : start from Seam Social code to provide an implementation for Java Social with the goal to go back to &lt;span class=&quot;caps&quot;&gt;JCP&lt;/span&gt; in the future. This project is also a experiment to answer the problem and challenges in creating a standard &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for Social Media &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for Java platform. Thus Agorava is born&lt;/p&gt;
&lt;h3&gt;But most Social Media already have their own APIs. So why do we reinvent the wheel?&lt;/h3&gt;
&lt;p&gt;Yes it&amp;#8217;s true, but these social APIs are almost always in Javascript only and if it’s available in Java,  mostly its created by a third part or its build for one or few particular Social Media. So they are ok if you want to deal with &lt;span class=&quot;caps&quot;&gt;GUI&lt;/span&gt; or simple manipulation. If you need to extend functionalities (crawl Twitter followers for instance or perform full text search on your Facebook Timeline) or build a mashup between different services those JS &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; would show their limit quickly.&lt;br /&gt;
Having a vendor free solution to deal with these Services is also an advantage, we&amp;#8217;ll try to implement all the available public APIs and provide similar functionalities across &amp;#8220;all Social Media&amp;#8221;.&lt;/p&gt;
&lt;h3&gt;Agorava is already alive and active!&lt;/h3&gt;
&lt;p&gt;Agorava can be used right now. You can test our demo application &lt;a href=&quot;http://socializer.agorava.cloudbees.net/&quot;&gt;Socializer&lt;/a&gt; or fork the &lt;a href=&quot;https://github.com/agorava/agorava-socializer&quot;&gt;Socializer project on Github&lt;/a&gt; and run it with a simple &lt;code&gt;mvn -Prun&lt;/code&gt;.&lt;br /&gt;
You already have some documentation on our &lt;a href=&quot;https://docs.jboss.org/author/display/AGOVA&quot;&gt;wiki&lt;/a&gt; to start hacking our code so feel free to try it!&lt;br /&gt;
Agorava project is live and growing day by day! It also have &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/agorava-dev&quot;&gt;User Group&lt;/a&gt; for anyone like to post doubts or know the progress of the project&lt;/p&gt;
&lt;h3&gt;Project roadmap&lt;/h3&gt;
&lt;p&gt;Right now we&amp;#8217;re aiming a 0.5.0 release (the 0.5.0 &lt;span class=&quot;caps&quot;&gt;SNAPSHOT&lt;/span&gt; is fully functional) during the summer. This version will be focused on &lt;span class=&quot;caps&quot;&gt;CDI&lt;/span&gt; implementation only. Main objective of 0.5.0 are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Support stateless architecture (right now an http session is needed to store user Oauth Tokens)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normally (except if people are ready to contribute and are not afraid of refactoring for version 1.0.0), we won&amp;#8217;t work on existing modules (Twitter, Facebook, LinkedIn) since &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; could change in version 1.0.0 when we&amp;#8217;ll integrate &lt;span class=&quot;caps&quot;&gt;JAX&lt;/span&gt;-RS client framework.&lt;/p&gt;
&lt;p&gt;Objective for 1.0.0 are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Change &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; engine for &lt;span class=&quot;caps&quot;&gt;JAX&lt;/span&gt;-RS 2.0 client framework&lt;/li&gt;
	&lt;li&gt;If necessary implement our own OAuth implementation on &lt;span class=&quot;caps&quot;&gt;JAX&lt;/span&gt;-RS client Framework&lt;/li&gt;
	&lt;li&gt;Provide compatibility with Weld-OSGi&lt;/li&gt;
	&lt;li&gt;Java SE implementation&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;JSR&lt;/span&gt; 330 specific &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; and implementation (Guice or Spring)&lt;/li&gt;
	&lt;li&gt;Finished Twitter, LinkedIn, Facebook Modules&lt;/li&gt;
	&lt;li&gt;New modules?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;If you want to contribute?&lt;/h3&gt;
&lt;p&gt;Of course we need contributors to help us to make Agorava a better Social Media &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for Java platform.&lt;/p&gt;
&lt;p&gt;To contribute to, help or just follow the project you can:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;join us on our &lt;a href=&quot;http://groups.google.com/group/agorava-dev&quot;&gt;Google Group&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Subscribe to our mailing list (same content as Group) by sending an empty mail to &lt;a href=&quot;mailto:agorava-dev+subscribe@googlegroups.com&quot;&gt;agorava-dev+subscribe@googlegroups.com&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;join us on &lt;span class=&quot;caps&quot;&gt;IRC&lt;/span&gt; on &lt;code&gt;chat.freenode.net&lt;/code&gt; channel &lt;code&gt;#agorava&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;post your issues, enhancement wishes or ideas on our &lt;a href=&quot;https://issues.jboss.org/browse/AGOVA&quot;&gt;&lt;span class=&quot;caps&quot;&gt;JIRA&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;fork our project and send pull requests on &lt;a href=&quot;https://github.com/agorava&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;follow us on Twitter &lt;a href=&quot;http://twitter.com/agoravaproj&quot;&gt;@agoravaproj&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;spread the word&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Project Sponsors&lt;/h3&gt;
&lt;p&gt;On this road we are not alone. Organizations help us every day to make Agorava a reality and a success. So we&amp;#8217;d like to thanks :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.ippon.fr&quot;&gt;Ippon Technologies&lt;/a&gt; (my employer) a French Consulting company that agreed for giving me time to work on Seam Social and now on Agorava&lt;/li&gt;
	&lt;li&gt;JBoss (Red Hat) who hosted Seam Social and helped Agorava launch and continue to support us every day with Jira, Confluence and good advice. Special thanks to Jason, Pete, Lincoln and Dan.&lt;/li&gt;
	&lt;li&gt;The &lt;span class=&quot;caps&quot;&gt;JCP&lt;/span&gt;. Ok they voted down our &lt;span class=&quot;caps&quot;&gt;JSR&lt;/span&gt; proposal but most of their critics were helpful and lead us to start Agorava. We&amp;#8217;ll get back to them soon.&lt;/li&gt;
	&lt;li&gt;Spring Source. Spring Social was the inspirer of Seam Social. I also borrowed a lot of code from Spring Social for Twitter, LinkedIn and Facebook connectors. Thank you guys.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Follow us&lt;/h3&gt;
&lt;p&gt;If you like to keep track of the progress of Agorava following links help you&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Website: &lt;a href=&quot;http://agorava.org&quot;&gt;http://agorava.org&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Twitter : &lt;a href=&quot;http://twitter.com/AgoravaProj&quot;&gt;@Agoravaproj&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;User Group: &lt;a href=&quot;http://groups.google.com/group/agorava-dev&quot;&gt;http://groups.google.com/group/agorava-dev&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;GitHub: &lt;a href=&quot;https://github.com/agorava&quot;&gt;https://github.com/agorava&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See you soon!&lt;/p&gt;
    </content>
  </entry>
</feed>
